:py:mod:`airflow.providers.elasticsearch.log.es_task_handler`
=============================================================

.. py:module:: airflow.providers.elasticsearch.log.es_task_handler


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.elasticsearch.log.es_task_handler.ElasticsearchTaskHandler




Attributes
~~~~~~~~~~

.. autoapisummary::

   airflow.providers.elasticsearch.log.es_task_handler.EsLogMsgType


.. py:data:: EsLogMsgType
   

   

.. py:class:: ElasticsearchTaskHandler(base_log_folder: str, filename_template: str, log_id_template: str, end_of_log_mark: str, write_stdout: bool, json_format: bool, json_fields: str, host_field: str = 'host', offset_field: str = 'offset', host: str = 'localhost:9200', frontend: str = 'localhost:5601', es_kwargs: Optional[dict] = conf.getsection('elasticsearch_configs'))

   Bases: :py:obj:`airflow.utils.log.file_task_handler.FileTaskHandler`, :py:obj:`airflow.utils.log.logging_mixin.ExternalLoggingMixin`, :py:obj:`airflow.utils.log.logging_mixin.LoggingMixin`

   ElasticsearchTaskHandler is a python log handler that
   reads logs from Elasticsearch. Note logs are not directly
   indexed into Elasticsearch. Instead, it flushes logs
   into local files. Additional software setup is required
   to index the log into Elasticsearch, such as using
   Filebeat and Logstash.
   To efficiently query and sort Elasticsearch results, we assume each
   log message has a field `log_id` consists of ti primary keys:
   `log_id = {dag_id}-{task_id}-{execution_date}-{try_number}`
   Log messages with specific log_id are sorted based on `offset`,
   which is a unique integer indicates log message's order.
   Timestamp here are unreliable because multiple log messages
   might have the same timestamp.

   .. py:attribute:: PAGE
      :annotation: = 0

      

   .. py:attribute:: MAX_LINE_PER_PAGE
      :annotation: = 1000

      

   .. py:attribute:: LOG_NAME
      :annotation: = Elasticsearch

      

   .. py:method:: es_read(self, log_id: str, offset: str, metadata: dict) -> list

      Returns the logs matching log_id in Elasticsearch and next offset.
      Returns '' if no log is found or there was an error.

      :param log_id: the log_id of the log to read.
      :type log_id: str
      :param offset: the offset start to read log from.
      :type offset: str
      :param metadata: log metadata, used for steaming log download.
      :type metadata: dict


   .. py:method:: emit(self, record)

      Do whatever it takes to actually log the specified logging record.

      This version is intended to be implemented by subclasses and so
      raises a NotImplementedError.


   .. py:method:: set_context(self, ti: airflow.models.TaskInstance) -> None

      Provide task_instance context to airflow task handler.

      :param ti: task instance object


   .. py:method:: close(self) -> None

      Tidy up any resources used by the handler.

      This version removes the handler from an internal map of handlers,
      _handlers, which is used for handler lookup by name. Subclasses
      should ensure that this gets called from overridden close()
      methods.


   .. py:method:: log_name(self) -> str
      :property:

      The log name


   .. py:method:: get_external_log_url(self, task_instance: airflow.models.TaskInstance, try_number: int) -> str

      Creates an address for an external log collecting service.

      :param task_instance: task instance object
      :type: task_instance: TaskInstance
      :param try_number: task instance try_number to read logs from.
      :type try_number: Optional[int]
      :return: URL to the external log collection service
      :rtype: str


   .. py:method:: supports_external_link(self) -> bool
      :property:

      Whether we can support external links



