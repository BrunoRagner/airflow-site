:py:mod:`airflow.providers.grpc.hooks.grpc`
===========================================

.. py:module:: airflow.providers.grpc.hooks.grpc

.. autoapi-nested-parse::

   GRPC Hook



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.grpc.hooks.grpc.GrpcHook




.. py:class:: GrpcHook(grpc_conn_id: str = default_conn_name, interceptors: Optional[List[Callable]] = None, custom_connection_func: Optional[Callable] = None)

   Bases: :py:obj:`airflow.hooks.base.BaseHook`

   General interaction with gRPC servers.

   :param grpc_conn_id: The connection ID to use when fetching connection info.
   :type grpc_conn_id: str
   :param interceptors: a list of gRPC interceptor objects which would be applied
       to the connected gRPC channel. None by default.
   :type interceptors: a list of gRPC interceptors based on or extends the four
       official gRPC interceptors, eg, UnaryUnaryClientInterceptor,
       UnaryStreamClientInterceptor, StreamUnaryClientInterceptor,
       StreamStreamClientInterceptor.
   :param custom_connection_func: The customized connection function to return gRPC channel.
   :type custom_connection_func: python callable objects that accept the connection as
       its only arg. Could be partial or lambda.

   .. py:attribute:: conn_name_attr
      :annotation: = grpc_conn_id

      

   .. py:attribute:: default_conn_name
      :annotation: = grpc_default

      

   .. py:attribute:: conn_type
      :annotation: = grpc

      

   .. py:attribute:: hook_name
      :annotation: = GRPC Connection

      

   .. py:method:: get_connection_form_widgets() -> Dict[str, Any]
      :staticmethod:

      Returns connection widgets to add to connection form


   .. py:method:: get_conn(self) -> grpc.Channel

      Returns connection for the hook.


   .. py:method:: run(self, stub_class: Callable, call_func: str, streaming: bool = False, data: Optional[dict] = None) -> Generator

      Call gRPC function and yield response to caller



