:py:mod:`airflow.providers.airbyte.operators.airbyte`
=====================================================

.. py:module:: airflow.providers.airbyte.operators.airbyte


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.airbyte.operators.airbyte.AirbyteTriggerSyncOperator




.. py:class:: AirbyteTriggerSyncOperator(connection_id: str, airbyte_conn_id: str = 'airbyte_default', asynchronous: Optional[bool] = False, api_version: str = 'v1', wait_seconds: float = 3, timeout: Optional[float] = 3600, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   This operator allows you to submit a job to an Airbyte server to run a integration
   process between your source and destination.

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:AirbyteTriggerSyncOperator`

   :param airbyte_conn_id: Required. The name of the Airflow connection to get connection
       information for Airbyte.
   :type airbyte_conn_id: str
   :param connection_id: Required. The Airbyte ConnectionId UUID between a source and destination.
   :type connection_id: str
   :param asynchronous: Optional. Flag to get job_id after submitting the job to the Airbyte API.
       This is useful for submitting long running jobs and
       waiting on them asynchronously using the AirbyteJobSensor.
   :type asynchronous: bool
   :param api_version: Optional. Airbyte API version.
   :type api_version: str
   :param wait_seconds: Optional. Number of seconds between checks. Only used when ``asynchronous`` is False.
   :type wait_seconds: float
   :param timeout: Optional. The amount of time, in seconds, to wait for the request to complete.
       Only used when ``asynchronous`` is False.
   :type timeout: float

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['connection_id']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> None

      Create Airbyte Job and wait to finish



