:py:mod:`airflow.providers.alibaba.cloud.sensors.oss_key`
=========================================================

.. py:module:: airflow.providers.alibaba.cloud.sensors.oss_key


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.alibaba.cloud.sensors.oss_key.OSSKeySensor




.. py:class:: OSSKeySensor(bucket_key: str, region: str, bucket_name: Optional[str] = None, oss_conn_id: Optional[str] = 'oss_default', **kwargs)

   Bases: :py:obj:`airflow.sensors.base.BaseSensorOperator`

   Waits for a key (a file-like instance on OSS) to be present in a OSS bucket.
   OSS being a key/value it does not support folders. The path is just a key
   a resource.

   :param bucket_key: The key being waited on. Supports full oss:// style url
       or relative path from root level. When it's specified as a full oss://
       url, please leave bucket_name as `None`.
   :type bucket_key: str
   :param region: OSS region
   :type region: str
   :param bucket_name: OSS bucket name
   :type bucket_name: str
   :param oss_conn_id: The Airflow connection used for OSS credentials.
   :type oss_conn_id: Optional[str]

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['bucket_key', 'bucket_name']

      

   .. py:method:: poke(self, context: airflow.utils.context.Context)

      Function that the sensors defined while deriving this class should
      override.


   .. py:method:: get_hook(self) -> airflow.providers.alibaba.cloud.hooks.oss.OSSHook

      Create and return an OSSHook



