:py:mod:`airflow.providers.neo4j.operators.neo4j`
=================================================

.. py:module:: airflow.providers.neo4j.operators.neo4j


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   airflow.providers.neo4j.operators.neo4j.Neo4jOperator




.. py:class:: Neo4jOperator(*, sql: str, neo4j_conn_id: str = 'neo4j_default', parameters: Optional[Union[Mapping, Iterable]] = None, **kwargs)

   Bases: :py:obj:`airflow.models.BaseOperator`

   Executes sql code in a specific Neo4j database

   .. seealso::
       For more information on how to use this operator, take a look at the guide:
       :ref:`howto/operator:Neo4jOperator`

   :param sql: the sql code to be executed. Can receive a str representing a
       sql statement
   :type sql: str
   :param neo4j_conn_id: Reference to :ref:`Neo4j connection id <howto/connection:neo4j>`.
   :type neo4j_conn_id: str

   .. py:attribute:: template_fields
      :annotation: :Sequence[str] = ['sql']

      

   .. py:method:: execute(self, context: airflow.utils.context.Context) -> None

      This is the main method to derive when creating an operator.
      Context is the same dictionary used as when rendering jinja templates.

      Refer to get_template_context for more context.



